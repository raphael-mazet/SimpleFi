generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Farmer {
  farmerId     String        @id @map("farmer_id")
  account      String
  transactions Transaction[]

  @@map("farmer")
}

model Field {
  fieldId                          String            @id @map("field_id")
  name                             String?           @unique
  protocolId                       String?           @map("protocol_id")
  yieldType                        Json?             @map("yield_type")
  instructions                     Json?
  riskLevel                        Int?              @map("risk_level")
  receiptToken                     String?           @unique @map("receipt_token")
  isEarning                        Boolean?          @map("is_earning")
  protocol                         Protocol?         @relation(fields: [protocolId], references: [protocolId])
  token_field_receipt_tokenTotoken Token?            @relation("field_receipt_tokenTotoken", fields: [receiptToken], references: [tokenId])
  contractAddresses                contractAddress[] @relation("contract_addressTofield")
  cropTokens                       FieldCrop[]       @relation("fieldTofieldCrop")
  seedTokens                       FieldSeed[]       @relation("fieldTofieldSeed")

  @@map("field")
}

model Protocol {
  protocolId                             String  @id @map("protocol_id")
  name                                   String?
  governanceToken                        String? @map("governance_token")
  links                                  Json?
  token_protocol_governance_tokenTotoken Token?  @relation("protocol_governance_tokenTotoken", fields: [governanceToken], references: [tokenId])
  fields                                 Field[]
  token_protocolTotoken_protocol_id      Token[] @relation("protocolTotoken_protocol_id")

  @@map("protocol")
}

model Token {
  tokenId                                       String             @id @map("token_id")
  protocolId                                    String?            @map("protocol_id")
  name                                          String?            @unique
  priceApi                                      String?            @map("price_api")
  address                                       String?
  isBase                                        Boolean            @map("is_base")
  contractInterfaceId                           String?            @map("contract_interface")
  contractInterface                             ContractInterface? @relation("contract_interfaceTotoken", fields: [contractInterfaceId], references: [ciId])
  protocol_protocolTotoken_protocol_id          Protocol?          @relation("protocolTotoken_protocol_id", fields: [protocolId], references: [protocolId])
  field_field_receipt_tokenTotoken              Field?             @relation("field_receipt_tokenTotoken")
  fieldCrop                                     FieldCrop[]        @relation("fieldCropTotoken")
  fieldSeed                                     FieldSeed[]        @relation("fieldSeedTotoken")
  protocol_protocol_governance_tokenTotoken     Protocol[]         @relation("protocol_governance_tokenTotoken")
  transaction_tokenTotransaction_input_token_1  Transaction[]      @relation("tokenTotransaction_input_token_1")
  transaction_tokenTotransaction_input_token_2  Transaction[]      @relation("tokenTotransaction_input_token_2")
  transaction_tokenTotransaction_input_token_3  Transaction[]      @relation("tokenTotransaction_input_token_3")
  transaction_tokenTotransaction_input_token_4  Transaction[]      @relation("tokenTotransaction_input_token_4")
  transaction_tokenTotransaction_output_token_1 Transaction[]      @relation("tokenTotransaction_output_token_1")
  transaction_tokenTotransaction_output_token_2 Transaction[]      @relation("tokenTotransaction_output_token_2")

  @@map("token")
}

model Transaction {
  transactionId                           String                 @id @map("transaction_id")
  hash                                    String?
  type                                    transaction_type?
  farmerId                                String?                @map("farmer_id")
  inputType                               transaction_in_output? @map("input_type")
  outputType                              transaction_in_output? @map("output_type")
  inputToken1                             String?                @map("input_token_1")
  inputToken2                             String?                @map("input_token_2")
  inputToken3                             String?                @map("input_token_3")
  inputToken4                             String?                @map("input_token_4")
  inputAmounts                            Int[]                  @map("input_amounts")
  outputToken1                            String?                @map("output_token_1")
  outputToken2                            String?                @map("output_token_2")
  outputAmounts                           Int[]                  @map("output_amounts")
  currency                                String?
  farmer                                  Farmer?                @relation(fields: [farmerId], references: [farmerId])
  token_tokenTotransaction_input_token_1  Token?                 @relation("tokenTotransaction_input_token_1", fields: [inputToken1], references: [tokenId])
  token_tokenTotransaction_input_token_2  Token?                 @relation("tokenTotransaction_input_token_2", fields: [inputToken2], references: [tokenId])
  token_tokenTotransaction_input_token_3  Token?                 @relation("tokenTotransaction_input_token_3", fields: [inputToken3], references: [tokenId])
  token_tokenTotransaction_input_token_4  Token?                 @relation("tokenTotransaction_input_token_4", fields: [inputToken4], references: [tokenId])
  token_tokenTotransaction_output_token_1 Token?                 @relation("tokenTotransaction_output_token_1", fields: [outputToken1], references: [tokenId])
  token_tokenTotransaction_output_token_2 Token?                 @relation("tokenTotransaction_output_token_2", fields: [outputToken2], references: [tokenId])

  @@map("transaction")
}

model FieldCrop {
  tokenId String @map("token_id")
  fieldId String @map("field_id")
  field   Field  @relation("fieldTofieldCrop", fields: [fieldId], references: [fieldId])
  token   Token  @relation("fieldCropTotoken", fields: [tokenId], references: [tokenId])

  @@id([tokenId, fieldId])
  @@map("field_crop")
}

model FieldSeed {
  tokenId   String @map("token_id")
  fieldId   String @map("field_id")
  seedIndex Int?   @map("seed_index")
  field     Field  @relation("fieldTofieldSeed", fields: [fieldId], references: [fieldId])
  token     Token  @relation("fieldSeedTotoken", fields: [tokenId], references: [tokenId])

  @@id([tokenId, fieldId])
  @@map("field_seed")
}

model ContractInterface {
  ciId            String            @id @map("ci_id")
  name            String
  abi             Json
  isErc           Boolean?          @map("is_erc")
  decimals        Int?
  contractAddress contractAddress[] @relation("contract_addressTocontract_interface")
  token           Token[]           @relation("contract_interfaceTotoken")

  @@map("contract_interface")
}

model contractAddress {
  addressId           String            @id @map("address_id")
  fieldId             String            @map("field_id")
  contractInterfaceId String            @map("contract_interface")
  address             String
  addressTypes        address_type[]    @map("address_type")
  contractInterface   ContractInterface @relation("contract_addressTocontract_interface", fields: [contractInterfaceId], references: [ciId])
  field               Field             @relation("contract_addressTofield", fields: [fieldId], references: [fieldId])

  @@map("contract_address")
}

enum transaction_in_output {
  token
  fiat

   @@map("transaction_in/output")
}

enum transaction_type {
  buy
  sell
  farm
  liquidity
  claim
  airdrop
}

enum address_type {
  balance
  underlying
  earning
  deposit
  rewardRate
  rewardWeight
}
